scheme SimpleRail =
    class
        type 
            TrainId == t1 | t2,
            SegmentId = {| n : Int :- n >= 0 /\ n < max |}
        value
            max : Int
        axiom
            max = 5
        
        transition_system
            [TS]
            variable
                position [ t : TrainId ] : SegmentId,
                occupied [ s : SegmentId ] : Bool

            init_constraint
                position[t1] = 1 /\
                position[t2] = 4 /\
                occupied[0] = false /\
                occupied[1] = true /\
                occupied[2] = false /\
                occupied[3] = false /\
                occupied[4] = true
            
            transition_rules
                MOVE_LEFT [=] MOVE_RIGHT

                where
                [ MOVE_RIGHT ] = -- Unfolds to 2 * 3 * 3 rules...
                    (([=] t : TrainId, s1 : SegmentId, s2 : SegmentId :- 
                        position[t] < max /\ 
                        position[t] = s1 /\ 
                        (s1 + 1) = s2 /\ ~occupied[s2] ==> 
                            position'[t] = position[t] + 1,
                            occupied'[s1] = false,
                            occupied'[s2] = true)),
                [ MOVE_LEFT ] = -- Unfolds two to rules
                    (([=] t : TrainId :- 
                        position[t] < max /\ ~occupied[position[t] - 1] ==> 
                            position'[t] = position[t] - 1,
                            occupied'[position[t]] = false,
                            occupied'[position[t] - 1] = true))
            end
    end