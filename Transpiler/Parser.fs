// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Transpiler
open Transpiler.Helpers

let parse_error_rich = Some Helpers.error_handler

# 13 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COMMA
  | END
  | TYPE
  | CLASS
  | SCHEME
  | EQ
  | LT
  | LE
  | GT
  | GE
  | FALSE
  | TRUE
  | CHAR of (char)
  | TEXT of (string)
  | INT of (int)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_END
    | TOKEN_TYPE
    | TOKEN_CLASS
    | TOKEN_SCHEME
    | TOKEN_EQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_CHAR
    | TOKEN_TEXT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_scheme
    | NONTERM_declarations
    | NONTERM_type_declarations

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COMMA  -> 1 
  | END  -> 2 
  | TYPE  -> 3 
  | CLASS  -> 4 
  | SCHEME  -> 5 
  | EQ  -> 6 
  | LT  -> 7 
  | LE  -> 8 
  | GT  -> 9 
  | GE  -> 10 
  | FALSE  -> 11 
  | TRUE  -> 12 
  | CHAR _ -> 13 
  | TEXT _ -> 14 
  | INT _ -> 15 
  | ID _ -> 16 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_END 
  | 3 -> TOKEN_TYPE 
  | 4 -> TOKEN_CLASS 
  | 5 -> TOKEN_SCHEME 
  | 6 -> TOKEN_EQ 
  | 7 -> TOKEN_LT 
  | 8 -> TOKEN_LE 
  | 9 -> TOKEN_GT 
  | 10 -> TOKEN_GE 
  | 11 -> TOKEN_FALSE 
  | 12 -> TOKEN_TRUE 
  | 13 -> TOKEN_CHAR 
  | 14 -> TOKEN_TEXT 
  | 15 -> TOKEN_INT 
  | 16 -> TOKEN_ID 
  | 19 -> TOKEN_end_of_input
  | 17 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_scheme 
    | 3 -> NONTERM_declarations 
    | 4 -> NONTERM_type_declarations 
    | 5 -> NONTERM_type_declarations 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 19 
let _fsyacc_tagOfErrorTerminal = 17

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COMMA  -> "COMMA" 
  | END  -> "END" 
  | TYPE  -> "TYPE" 
  | CLASS  -> "CLASS" 
  | SCHEME  -> "SCHEME" 
  | EQ  -> "EQ" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | FALSE  -> "FALSE" 
  | TRUE  -> "TRUE" 
  | CHAR _ -> "CHAR" 
  | TEXT _ -> "TEXT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | CLASS  -> (null : System.Object) 
  | SCHEME  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TEXT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;1us;65535us;6us;7us;1us;65535us;9us;10us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;7us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;1us;2us;1us;3us;2us;3us;5us;1us;4us;1us;5us;1us;5us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;18us;20us;23us;25us;27us;|]
let _fsyacc_action_rows = 14
let _fsyacc_actionTableElements = [|1us;32768us;5us;3us;0us;49152us;0us;16385us;1us;32768us;14us;4us;1us;32768us;6us;5us;1us;32768us;4us;6us;1us;32768us;3us;9us;1us;32768us;2us;8us;0us;16386us;1us;32768us;14us;11us;1us;16387us;1us;12us;0us;16388us;1us;32768us;14us;13us;0us;16389us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;4us;6us;8us;10us;12us;14us;15us;17us;19us;20us;22us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;6us;2us;1us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;3us;4us;4us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;65535us;65535us;65535us;65535us;65535us;16386us;65535us;65535us;16388us;65535us;16389us;|]
let _fsyacc_reductions = lazy [|
# 173 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Transpiler.Scheme option in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 182 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_scheme in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                                     _1 
                   )
# 27 "Parser.fsy"
                 : Transpiler.Scheme option));
# 193 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_declarations in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                                                   Some (_2, _5) 
                   )
# 30 "Parser.fsy"
                 : 'gentype_scheme));
# 205 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_type_declarations in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                                    Type(_2) 
                   )
# 33 "Parser.fsy"
                 : 'gentype_declarations));
# 216 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                  [_1] 
                   )
# 36 "Parser.fsy"
                 : 'gentype_type_declarations));
# 227 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_type_declarations in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                          _3 :: _1 
                   )
# 37 "Parser.fsy"
                 : 'gentype_type_declarations));
|]
# 240 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 20;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Transpiler.Scheme option =
    engine lexer lexbuf 0 :?> _
