{

//module Lexer =

open FSharp.Text.Lexing
open System
open Parser

exception SyntaxError of string

let lexeme = LexBuffer<_>.LexemeString

let mutable line = 1
let mutable column = 1
let mutable filename = ""

/// <summary>
/// Set filename in Lexer and reset counters
/// </summary>
/// <param name="f">Filename of the file being lexed</param>
let setFilename (f: string) = 
    filename <- f
    line <- 1
    column <- 1

/// <summary>
/// Increment line counter and reset column counter
/// </summary>
let newline () = 
    line <- line + 1
    column <- 1
    
/// <summary>
/// Increment column counter based on whitespace
/// </summary>
/// <param name="lexbuf">LexBuffer</param>
let whitespace (lexbuf: LexBuffer<_>) =
    match lexbuf.LexemeChar 0 with
    | ' '  -> column <- column + 1
    | '\t' -> column <- column + 4
    | _ -> ()

/// <summary>
/// Increment column counter based on lexed string and return the current <see cref="FSharp.Text.Lexing.Position"/>
/// </summary>
/// <param name="lexbuf">LexBuffer</param>
let getPos (lexbuf: LexBuffer<_>) =
    let c = column
    column <- column + lexbuf.LexemeLength
    
    { pos_bol = lexbuf.StartPos.pos_cnum
      pos_cnum = c
      pos_fname = filename
      pos_lnum = line
      pos_orig_lnum = line }
  
// This is to avoid state explosion
// https://v2.ocaml.org/manual/lexyacc.html Section 7 Common errors
let keywords =   
    [   
        "class", CLASS;
        "scheme", SCHEME;
        "type", TYPE;
        "value", VALUE;
        "axiom", AXIOM;
        "end", END;
        "all", ALL;
        "exists", EXISTS;
        "exists!", EXACTLY_ONE;
        "transition_system", TS;
        "transition_rules", TR;
        "where", WHERE;
        "variable", VARIABLE;
        "init_constraint", INIT_CONSTRAINT;
        "array", ARRAY;
        "of", OF;
    ] |> Map.ofList   
 
let ops =   
    [   
        "=",    EQ;
        "=>",   IM;   
        "==>",  GU;
        "<",    LT;   
        "<=",   LE;   
        ">",    GT;   
        ">=",   GE;   
        "-",    MI;
        "+",    PL;
        ":-",   IS;
        "[=]",  NONDETERMINISTIC;
        "[>]",  DETERMINISTIC;
        "/\\",   LAND;
        "/\\",   LAND;
        "\\/",   LOR;
    ] |> Map.ofList
    
let symbols =
    [
        '.',    DOT;
        ',',    COMMA;
        ':',    COLON;
        '[',    LBRACKET;
        ']',    RBRACKET;
        '(',    LPAREN;
        ')',    RPAREN;
        '|',    BAR;
        '\"',    QUOTE;
        '/',    SLASH;
        '\'',   PRIME;
        '\\',   BSLASH;
        '{',    LCURLY;
        '}',    RCURLY;
    ] |> Map.ofList    
   
}


let c           = '.'
let white       = ' ' | '\t'
let newline     = '\r' | '\n' | "\r\n"

let char        = ['a'-'z' 'A'-'Z']   
let digit       = ['0'-'9']
let text  = char(char|digit|['-' '_' '.'])*   
let operator    = ">" | ">=" | "<" | "<=" | "=" | "-" | "+" | "==>" | "[=]" | "[>]" | ":-" | "=>" | "/\\" | "\\/"

let symbol      = '.' | ',' | ':' | '[' | ']' | '(' | ')' | '|' | '\"' | '/' | '\'' | '\\' | '{' | '}'

rule read =
    parse
    | white     { whitespace(lexbuf); read lexbuf }
    | newline   { newline (); read lexbuf }
    | "true"    { let start = getPos(lexbuf)
                  TRUE(start) }
    | "false"   { let start = getPos(lexbuf)
                  FALSE(start) }
    | operator  { let start = getPos(lexbuf)
                  ops.[lexeme lexbuf](start) }
    | symbol    { let start = getPos(lexbuf)
                  symbols.[(LexBuffer<_>.LexemeString lexbuf).Chars(0)](start) } 
    | text      { let start = getPos(lexbuf)
                  match keywords.TryFind(lexeme lexbuf) with
                  | Some(token) -> token(start)
                  | None -> TEXT(lexeme lexbuf, (start))
                }
    | ['-']?digit+   { let start = getPos(lexbuf)
                       INT(Int32.Parse(lexeme lexbuf), (start))} 
    | eof       { EOF(lexbuf.EndPos) }
    | _         { EOF(lexbuf.EndPos) }
