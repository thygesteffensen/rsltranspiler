{

//module Lexer =

open FSharp.Text.Lexing
open System
open Parser

exception SyntaxError of string

let lexeme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine
  
  
// This is to avoid state explosion
// https://v2.ocaml.org/manual/lexyacc.html Section 7 Common errors
let keywords =   
    [   
        "class", CLASS;
        "scheme", SCHEME;
        "type", TYPE;
        "value", VALUE;
        "axiom", AXIOM;
        "end", END;
        "all", ALL;
        "exists", EXISTS;
        "exists!", EXACTLY_ONE;
        "transition_system", TS;
        "variable", VARIABLE;
        "init_constraint", INIT_CONSTRAINT;
    ] |> Map.ofList   
 
let ops =   
    [   
        "=",    EQ;   
        "<",    LT;   
        "<=",   LE;   
        ">",    GT;   
        ">=",   GE;   
        "-",    MI;
        "+",    PL;
    ] |> Map.ofList   
}


let white       = [' ' '\t']+
let newline     = '\r' | '\n' | "\r\n"

let char        = ['a'-'z' 'A'-'Z']   
let digit       = ['0'-'9']
let text  = char(char|digit|['-' '_' '.'])*   
let operator    = ">" | ">=" | "<" | "<=" | "=" | "-" | "+" 

rule read =
    parse
    | white     { read lexbuf }
    | newline   { newline lexbuf; read lexbuf }
    | "true"    { TRUE }
    | "false"   { FALSE }
    | operator  { ops.[LexBuffer<_>.LexemeString lexbuf] } 
    | text      { match keywords.TryFind(LexBuffer<_>.LexemeString lexbuf) with
                  | Some(token) -> token
                  | None -> TEXT(LexBuffer<_>.LexemeString lexbuf) }
    | ','       { COMMA }
    | ':'       { COLON }
    | '['       { LBRACKET }
    | ']'       { RBRACKET }
    | '('       { LPAREN }
    | ')'       { RPAREN }
    | '|'       { BAR }
    | '"'       { QUOTE }
    | '/'       { SLASH }
    | '\\'      { BSLASH }
    | ['-']?digit+   { INT (Int32.Parse(lexeme lexbuf))} 
    | eof       { EOF }
    | _         { EOF }